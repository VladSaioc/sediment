comment "//" ;
comment "/*" "*/" ;

token Symbol '`' ((letter | ["$_"]) (letter | digit | ["$_\'"])*) '`';
token Label {"[["} ((letter | digit | [" $-\'_"]) (letter | digit | [" $-\'_"])*) {"]]"};

-- Entry point
Spec_. Specification_ ::= [Def_] [Eval_];

-- Definitions
[]. [Def_] ::= ;
(:). [Def_] ::= Def_ [Def_] ;

-- -- Domain definitions
DomDef_. Def_ ::= "domain" Ident "=" DomDefExp_ ";";
-- -- -- Union domains
DefUnion_. DomDefExp_ ::= Union_;
separator nonempty UnionBranch_"+";
UnionDom_. Union_ ::= "[" [UnionBranch_] "]";
TagDom_. UnionBranch_ ::= Ident "[" Dom_ "]";
Tag_. UnionBranch_ ::= Ident;
-- -- -- Non-union domains
coercions Dom_ 2;
DefNonUnion_. DomDefExp_ ::= Dom_;
FuncDom_. Dom_ ::= Dom_1 "->" Dom_;
ProdDom_. Dom_1 ::= Dom_2 "*" Dom_1;
VarDom_. Dom_2 ::= Ident;
IntDom_. Dom_2 ::= "Int";
BoolDom_. Dom_2 ::= "Bool";
SymDom_. Dom_2 ::= "Symbol";
StrDom_. Dom_2 ::= "String";

-- -- Syntax definitions
SyntaxDef_. Def_ ::= "syntax" Ident "=" [FormRule_] ";";
separator nonempty FormRule_ "|";
Term_. FormRule_ ::= Ident "of" Dom_;
BareTerm_. FormRule_ ::= Ident;

-- -- Transition systems
TSystem_. Def_ ::= "system" Ident ":" TDom_ "=" [Rule_] "end";
-- -- -- Transition system domains
BETDom_. TDom_ ::= Dom_ "|-" Dom_ "==>" Dom_;
NBETDom_. TDom_ ::= Dom_ "==>" Dom_;
-- -- -- Rules
terminator nonempty Rule_ ";";
BEAxiom_. Rule_ ::= Label ":" Config_ "|-" Config_1 "==>" Exp_1;
NBEAxiom_. Rule_ ::= Label ":" Config_1 "==>" Exp_1;
BERule_. Rule_ ::= Label ":"  Config_ "|-" Config_1 "==>" Exp_1 "\\\\" [Premise_];
NBERule_. Rule_ ::= Label ":" Config_1 "==>" Exp_1 "\\\\" [Premise_];
-- -- -- Premises
separator nonempty Premise_ ",";
IfPremise_. Premise_ ::= "if" Exp_1;
LetPremise_. Premise_ ::= "let" Config_ "=" Exp_1;
LetrecPremise_. Premise_ ::= "letrec" Ident ":" Dom_ "=" "\\" Ident "." Exp_1;
BETrInternalPremise_. Premise_ ::=  Exp_ "|-" Exp_1 "==>" Config_1;
BETrExternalPremise_. Premise_ ::=  Exp_ "|-" Exp_1 "=" Ident "=>" Config_1;
NBETrInternalPremise_. Premise_ ::=  Exp_1 "==>" Config_1;
NBETrExternalPremise_. Premise_ ::=  Exp_1 "=" Ident "=>" Config_1;
-- -- -- Configurations
coercions Config_ 1;
separator nonempty Config_1 ",";
PairConfig_. Config_ ::= Config_1 "," [Config_1];
TagConfig_. Config_1 ::= Ident "[" Config_ "]";
BareTagConfig_. Config_1 ::= Ident "[]";
VarConfig_. Config_1 ::= Ident;
ConstConfig_. Config_1 ::= Const_;

-- -- Data definitions
Data_. Def_ ::= "let" Config_ "=" Exp_1 ";";
DataRec_. Def_ ::= "letrec" Ident ":" Dom_ "=" "\\" Ident "." Exp_1 ";";

-- -- Expressions
coercions Exp_ 14;
separator nonempty Exp_1 ",";
-- -- -- Pair formation
Pair_. Exp_ ::= Exp_1 "," [Exp_1];

-- -- -- Lambda-calculus elements
Lambda_. Exp_1 ::= "\\" Ident ":" Dom_ "." Exp_1;

-- -- -- Extended functional expressions
Let_. Exp_1 ::= "let" Config_ "=" Exp_1 "in" Exp_1;
Letrec_. Exp_1 ::= "letrec" Ident ":" Dom_ "=" "\\" Ident "." Exp_1 "in" Exp_1;
If_. Exp_1 ::= "if" Exp_1 "then" Exp_1 "else" Exp_1;

-- -- -- Infix expressions
Concat_. Exp_2 ::= Exp_2 "++" Exp_3;
Plus_. Exp_3 ::= Exp_3 "+" Exp_4;
Minus_. Exp_3 ::= Exp_3 "-" Exp_4;
Prod_. Exp_4 ::= Exp_4 "*" Exp_5;
Div_. Exp_4 ::= Exp_4 "/" Exp_5;
Mod_. Exp_4 ::= Exp_4 "%" Exp_5;
Or_. Exp_5 ::= Exp_5 "|" Exp_6;
And_. Exp_6 ::= Exp_6 "&" Exp_7;
Equal_. Exp_7 ::= Exp_8 "==" Exp_8;
NotEqual_. Exp_7 ::= Exp_8 "!=" Exp_8;
LessThan_. Exp_8 ::= Exp_9 "<" Exp_9;
LessEqThan_. Exp_8 ::= Exp_9 "<=" Exp_9;
GreaterThan_. Exp_8 ::= Exp_9 ">" Exp_9;
GreaterEqThan_. Exp_8 ::= Exp_9 ">=" Exp_9;

-- -- -- Tag operations
Project_. Exp_9 ::= Exp_9 ">>" Ident;
IsTag_. Exp_9 ::= Exp_9 "is" Ident;

-- -- -- Unary expressions
Inverse_. Exp_10 ::= "-" Exp_10;
Neg_. Exp_10 ::= "!" Exp_10;

-- -- -- Tuple extraction
Head_. Exp_11 ::= "(<)" Exp_11;
Tail_. Exp_11 ::= "(>)" Exp_11;

-- -- -- Function application
App_. Exp_12 ::= Exp_12 "(" Exp_ ")";
Update_. Exp_13 ::= "[" Exp_ "->" Exp_ "]" Exp_13;

-- -- -- Variables and constants
Inject_. Exp_14 ::= Ident "[" Exp_ "]";
Var_. Exp_14 ::= Ident;
ConstE_. Exp_14 ::= Const_;
BareTag_. Exp_14 ::= Ident "[]";
Bot_. Const_ ::= "_/" Dom_ "\\_";
Int_. Const_ ::= Integer;
Str_. Const_ ::= String;
Sym_. Const_ ::= Symbol;
BTrue_. Const_ ::= "true";
BFalse_. Const_ ::= "false";

-- Evaluations
terminator Eval_ ";";
ExpEval_. Eval_ ::= "evaluate" Exp_;
BEEval_. Eval_ ::= "evaluate" Exp_ "|-" Exp_ "in" Ident;
NBEEval_. Eval_ ::= "evaluate" Exp_ "in" Ident;

entrypoints Specification_;