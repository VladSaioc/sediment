comment "//" ;
comment "/*" "*/" ;

token Symbol '`' ((letter | ["$_"]) (letter | digit | ["$_\'"])*) '`';

-- Entry point
Spec_. Specification_ ::= [Def_] [Eval_];

-- Definitions
[]. [Def_] ::= ;
(:). [Def_] ::= Def_ [Def_] ;

-- -- Domain definitions
DomDef_. Def_ ::= "domain" Ident ":=" DomDefExp_ ";";
-- -- -- Union domains
DefUnion_. DomDefExp_ ::= Union_;
separator nonempty UnionBranch_"+";
UnionDom_. Union_ ::= "[" [UnionBranch_] "]";
TagDom_. UnionBranch_ ::= Ident "[" Dom_ "]";
Tag_. UnionBranch_ ::= Ident;
-- -- -- Non-union domains
coercions Dom_ 2;
DefNonUnion_. DomDefExp_ ::= Dom_;
FuncDom_. Dom_ ::= Dom_1 "->" Dom_;
ProdDom_. Dom_1 ::= Dom_2 "*" Dom_1;
VarDom_. Dom_2 ::= Ident;
IntDom_. Dom_2 ::= "int";
BoolDom_. Dom_2 ::= "bool";
SymDom_. Dom_2 ::= "symbol";
StrDom_. Dom_2 ::= "string";

-- -- Syntax definitions
SyntaxDef_. Def_ ::= "syntax" Ident ":=" [FormRule_] ";";
separator nonempty FormRule_ "|";
Term_. FormRule_ ::= Ident "of" Dom_;
BareTerm_. FormRule_ ::= Ident;

-- -- Transition systems
TSystem_. Def_ ::= "system" TDom_ ":" Ident ":=" [Rule_] "end";
-- -- -- Transition system domains
BETDom_. TDom_ ::= Dom_ "|-" Dom_ "==>" Dom_;
NBETDom_. TDom_ ::= Dom_ "==>" Dom_;
-- -- -- Rules
terminator nonempty Rule_ ";";
BEAxiom_. Rule_ ::= "[" Ident "]:" Config_ "|-" Config_ "==>" Exp_;
NBEAxiom_. Rule_ ::= "[" Ident "]:" Config_ "==>" Exp_;
BERule_. Rule_ ::= "[" Ident "]:"  Config_ "|-" Config_ "==>" Exp_ "\\\\" [Premise_];
NBERule_. Rule_ ::= "[" Ident "]:" Config_ "==>" Exp_ "\\\\" [Premise_];
-- -- -- Premises
separator nonempty Premise_ ",";
IfPremise_. Premise_ ::= "if" Exp_;
LetPremise_. Premise_ ::= "let" Ident ":=" Exp_;
LetrecPremise_. Premise_ ::= "letrec" Dom_ ":" Ident ":=" Exp_;
BETrInternalPremise_. Premise_ ::=  Exp_ "|-" Exp_ "==>" Config_;
BETrExternalPremise_. Premise_ ::=  Exp_ "|-" Exp_ "=" Ident "=>" Config_;
NBETrInternalPremise_. Premise_ ::=  Exp_ "==>" Config_;
NBETrExternalPremise_. Premise_ ::=  Exp_ "=" Ident "=>" Config_;
-- -- -- Configurations
separator nonempty Config_ ",";
TagConfig_. Config_ ::= Ident "[" Config_ "]";
PairConfig_. Config_ ::= "(" Config_ "," [Config_] ")";
BareTagConfig_. Config_ ::= Ident "[]";
VarConfig_. Config_ ::= Ident;
ConstConfig_. Config_ ::= Const_;

-- -- Data definitions
Data_. Def_ ::= "data" Ident ":=" Exp_ ";";
DataRec_. Def_ ::= "datarec" Dom_ ":" Ident ":=" Exp_ ";";

-- -- Expressions
coercions Exp_ 9;
-- -- -- Lambda-calculus elements
Lambda_. Exp_ ::= "\\" Dom_ ":" Ident "." Exp_;
App_. Exp_8 ::= Exp_9 "(" Exp_ ")";
-- -- -- Extended functional expressions
Let_. Exp_ ::= "let" Ident ":=" Exp_ "in" Exp_;
Letrec_. Exp_ ::= "letrec" Dom_ ":" Ident ":=" Exp_ "in" Exp_;
If_. Exp_ ::= "if" Exp_ "then" Exp_ "else" Exp_;
Update_. Exp_9 ::= "[" Exp_ "->" Exp_ "]" Exp_9;
-- -- -- Infix expressions
Concat_. Exp_1 ::= Exp_1 "++" Exp_2;
Plus_. Exp_2 ::= Exp_2 "+" Exp_3;
Minus_. Exp_2 ::= Exp_2 "-" Exp_3;
Prod_. Exp_3 ::= Exp_3 "*" Exp_4;
Div_. Exp_3 ::= Exp_3 "/" Exp_4;
Mod_. Exp_3 ::= Exp_3 "%" Exp_4;
Or_. Exp_4 ::= Exp_4 "|" Exp_5;
And_. Exp_5 ::= Exp_5 "&" Exp_6;
Equal_. Exp_6 ::= Exp_7 "==" Exp_7;
NotEqual_. Exp_6 ::= Exp_7 "!=" Exp_7;
LessThan_. Exp_6 ::= Exp_7 "<" Exp_7;
LessEqThan_. Exp_6 ::= Exp_7 "<=" Exp_7;
GreaterThan_. Exp_6 ::= Exp_7 ">" Exp_7;
GreaterEqThan_. Exp_6 ::= Exp_7 ">=" Exp_7;

-- -- -- Pairs and tuples
separator nonempty Exp_ ",";
Pair_. Exp_7 ::= "(" Exp_ "," [Exp_] ")";
Head_. Exp_7 ::= "(<)" Exp_8 ;
Tail_. Exp_7 ::= "(>)" Exp_8 ;
Project_. Exp_7 ::= Exp_8 ">>" Ident;
Inject_. Exp_7 ::= Ident "[" Exp_ "]";
IsTag_. Exp_7 ::= Exp_8 "is" Ident;

-- -- -- Unary expressions
Inverse_. Exp_8 ::= "-" Exp_8;
Neg_. Exp_8 ::= "!" Exp_8;

-- -- -- Variables and constants
Var_. Exp_9 ::= Ident;
ConstE_. Exp_9 ::= Const_;
BareTag_. Exp_9 ::= Ident "[]";
Bot_. Const_ ::= "_/" Dom_ "\\_";
Int_. Const_ ::= Integer;
Str_. Const_ ::= String;
Sym_. Const_ ::= Symbol;
BTrue_. Const_ ::= "true";
BFalse_. Const_ ::= "false";

-- Evaluations
terminator Eval_ ";";
BEEval_. Eval_ ::= "evaluate" Exp_ "|-" Exp_ "in" Ident;
NBEEval_. Eval_ ::= "evaluate" Exp_ "in" Ident;

entrypoints Specification_;