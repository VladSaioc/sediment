domain State = Symbol -> Int;

syntax Aexp = add : Aexp * Aexp
  | mul : Aexp * Aexp
  | sub : Aexp * Aexp
  | aparens : Aexp
  | aconst : Int
  | var : Symbol;

syntax Bexp = eq : Aexp * Aexp
  | lt : Aexp * Aexp
  | not : Bexp
  | and : Bexp * Bexp
  | bparens : Bexp
  | bconst : Bool;

syntax Stm = skip
  | assg : Symbol * Aexp
  | comp : Stm * Stm
  | ifs : Bexp * Stm * Stm
  | while : Bexp * Stm;

system Aexp : State |- Aexp ==> Int =
  [[ VAR ]]: s |- var{x} ==> s(x);
  
  [[ CONST ]]: s |- aconst{n} ==> n;

  [[ ADD ]]: s |- add{a1, a2} ==> v1 + v2 \\
    s |- a1 ==> v1,
    s |- a2 ==> v2;

  [[ MUL ]]: s |- mul{a1, a2} ==> v1 * v2 \\
    s |- a1 ==> v1,
    s |- a2 ==> v2;
    
  [[ SUB ]]: s |- sub{a1, a2} ==> v1 - v2 \\
    s |- a1 ==> v1,
    s |- a2 ==> v2;

  [[ PARENS ]]: s |- aparens{a} ==> v \\
    s |- a ==> v;
end

system Bexp : State |- Bexp ==> Bool =
  [[ CONST ]]: s |- bconst{b} ==> b;

  [[ EQ ]]: s |- eq{a1, a2} ==> v1 == v2 \\
    s |- a1 =Aexp=> v1,
    s |- a2 =Aexp=> v2;
    
  [[ LT ]]: s |- lt{a1, a2} ==> v1 < v2 \\
    s |- a1 =Aexp=> v1,
    s |- a2 =Aexp=> v2;
    
  [[ NOT ]]: s |- not{b} ==> !v \\
    s |- b ==> v;

  [[ PARENS ]]: s |- bparens{b} ==> v \\
    s |- b ==> v;
    
  [[ AND ]]: s |- and{b1, b2} ==> v1 & v2 \\
    s |- b1 ==> v1,
    s |- b2 ==> v2;
end

system Stm : Stm * State ==> State =
  [[ SKIP ]]: (skip{}, s) ==> s;
    
  [[ ASSIGN ]]: (assg{x, a}, s) ==> s[ x -> v ] \\
    s |- a =Aexp=> v;
    
  [[ COMP ]]: (comp{S1, S2}, s) ==> s' \\
    (S1, s) ==> s'',
    (S2, s'') ==> s';
    
  [[ IF ]]: (ifs{b, S1, S2}, s) ==> s' \\
    s |- b =Bexp=> true,
    (S1, s) ==> s';
    
  [[ IF ]]: (ifs{b, S1, S2}, s) ==> s' \\
    s |- b =Bexp=> false,
    (S2, s) ==> s';
    
  [[ WHILE ]]: (while{b, S}, s) ==> s' \\
    s |- b =Bexp=> true,
    (S, s) ==> s'',
    (while{b, S}, s'') ==> s';
    
  [[ WHILE ]]: (while{b, S}, s) ==> s \\
    s |- b =Bexp=> false;
end