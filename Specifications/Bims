domain State = Symbol -> Int;

syntax Aexp = Aexp '+' Aexp
  | Aexp '*' Aexp
  | Aexp '-' Aexp
  | '(' Aexp ')'
  | Int
  | 'var' Symbol;

syntax Bexp = Aexp '=' Aexp
  | Aexp '<' Aexp
  | '!' Bexp
  | Bexp '&' Bexp
  | 'b(' Bexp ')'
  | 'bconst' Bool;

syntax Stm = 'skip'
  | Symbol ':=' Aexp
  | Stm ';' Stm
  | 'if' Bexp 'then' Stm 'else' Stm
  | 'while' Bexp 'do' Stm;

system Aexp : State |- Aexp ==> Int =
  [[ VAR ]]: s |- {'var' x} ==> s(x);
  
  [[ CONST ]]: s |- {n} ==> n;

  [[ ADD ]]: s |- {a1 '+' a2} ==> v1 + v2 \\
    s |- a1 ==> v1,
    s |- a2 ==> v2;

  [[ MUL ]]: s |- {a1 '*' a2} ==> v1 * v2 \\
    s |- a1 ==> v1,
    s |- a2 ==> v2;
    
  [[ SUB ]]: s |- {a1 '-' a2} ==> v1 - v2 \\
    s |- a1 ==> v1,
    s |- a2 ==> v2;

  [[ PARENS ]]: s |- {'(' a ')'} ==> v \\
    s |- a ==> v;
end

system Bexp : State |- Bexp ==> Bool =
  [[ CONST ]]: s |- {'bconst' b} ==> b;

  [[ EQ ]]: s |- {a1 '=' a2} ==> v1 == v2 \\
    s |- a1 =Aexp=> v1,
    s |- a2 =Aexp=> v2;
    
  [[ LT ]]: s |- {a1 '<' a2} ==> v1 < v2 \\
    s |- a1 =Aexp=> v1,
    s |- a2 =Aexp=> v2;
    
  [[ NOT ]]: s |- {'!' b} ==> !v \\
    s |- b ==> v;

  [[ PARENS ]]: s |- {'b(' b ')'} ==> v \\
    s |- b ==> v;
    
  [[ AND ]]: s |- {b1 '&' b2} ==> v1 & v2 \\
    s |- b1 ==> v1,
    s |- b2 ==> v2;
end

system Stm : Stm * State ==> State =
  [[ SKIP ]]: ({'skip'}, s) ==> s;
    
  [[ ASSIGN ]]: ({x ':=' a}, s) ==> s[ x -> v ] \\
    s |- a =Aexp=> v;
    
  [[ COMP ]]: ({S1 ';' S2}, s) ==> s' \\
    (S1, s) ==> s'',
    (S2, s'') ==> s';
    
  [[ IF ]]: ({'if' b 'then' S1 'else' S2}, s) ==> s' \\
    s |- b =Bexp=> true,
    (S1, s) ==> s';
    
  [[ IF ]]: ({'if' b 'then' S1 'else' S2}, s) ==> s' \\
    s |- b =Bexp=> false,
    (S2, s) ==> s';
    
  [[ WHILE ]]: ({'while' b 'do' S}, s) ==> s' \\
    s |- b =Bexp=> true,
    (S, s) ==> s'',
    ({'while' b 'do' S}, s'') ==> s';
    
  [[ WHILE ]]: ({'while' b 'do' S}, s) ==> s \\
    s |- b =Bexp=> false;
end