syntax Values = '⟨' Fcon '⟩'
| '(' Values ',' Values ')'
| Env 'λ' Symbol '.' Fexp
| Env 'λr' Symbol * Symbol '.' Fexp
;

domain Env = Symbol -> Values;

syntax Fexp = '@' Symbol
| Fcon
| Fexp ',' Fexp
| Fexp Fexp
| 'if' Fexp 'then' Fexp 'else' Fexp
| 'λ' Symbol '.' Fexp
| 'let' Symbol '=' Fexp 'in' Fexp
| 'letrec' Symbol '=' Fexp 'in' Fexp;

syntax Fcon = '#' Int
| '?' Bool
| 'plus' | 'times' | 'minus' | 'equal' | 'not' | 'is0';

let int = \v : Int . {'⟨'{'#' v}'⟩'};
let bool = \v : Bool . {'⟨'{'?' v}'⟩'};

system Fexp : Env |- Fexp ==> Values =
[[ VAR ]]: env |- {'@' x} ==> env(x);

[[ CONST ]]: env |- {c} ==> {'⟨' c '⟩'};

[[ PAIR ]]: env |- {e1 ',' e2} ==> {'(' v1 ',' v2 ')'} \\
  env |- e1 ==> v1,
  env |- e2 ==> v2;

[[ APP ]]: env |- {e1 e2} ==> v \\
  env |- e1 ==> {env' 'λ' x '.' e},
  env |- e2 ==> v',
  env'[x -> v'] |- e ==> v;

[[ APP ]]: env |- {e1 e2} ==> v \\
  env |- e1 ==> {'⟨' c '⟩'},
  env |- e2 ==> v',
  (c, v') =apply=> v;

[[ APP ]]: env |- {e1 e2} ==> v \\
  env |- e1 ==> {env' 'λr' (f, x) '.' e},
  env |- e2 ==> v',
  let rclojure = {env' 'λr' (f, x) '.' e},
  env'[f -> rclojure][x -> v'] |- e ==> v;

[[ IF ]]: env |- {'if' b 'then' e1 'else' e2} ==> v \\
  env |- b ==> {'⟨'{'?' true}'⟩'},
  env |- e1 ==> v;

[[ IF ]]: env |- {'if' b 'then' e1 'else' e2} ==> v \\
  env |- b ==> {'⟨'{'?' false}'⟩'},
  env |- e2 ==> v;

[[ FN ]]: env |- {'λ' x '.' e} ==> {env 'λ' x '.' e};

[[ LET ]]: env |- {'let' x '=' e1 'in' e2} ==> v \\
  env |- e1 ==> v',
  env[x -> v'] |- e2 ==> v;

[[ LETREC ]]: env |- {'letrec' f '=' e1 'in' e2} ==> v \\
  env |- e1 ==> {env' 'λ' x '.' e},
  env[f -> {env' 'λr' (f , x) '.' e}] |- e2 ==> v;
end

system apply : Fcon * Values ==> Values =
[[ PLUS ]]: (
  {'plus'}, {'('
    {'⟨'{'#' v1}'⟩'} ',' {'⟨'{'#' v2}'⟩'}
')'}) ==> int (v1 + v2);

[[ MINUS ]]: ({'minus'}, {'('
  {'⟨'{'#' v1}'⟩'} ',' {'⟨'{'#' v2}'⟩'}
')'}) ==> int (v1 - v2);

[[ TIMES ]]: ({'times'}, {'('
  {'⟨'{'#' v1}'⟩'} ',' {'⟨'{'#' v2}'⟩'}
')'}) ==> int (v1 * v2);

[[ EQUAL ]]: ({'equal'},  {'('
  {'⟨'{'#' v1}'⟩'} ',' {'⟨'{'#' v2}'⟩'}
')'}) ==> bool (v1 == v2);

[[ NOT ]]: ({'not'}, {'⟨'{'?' b}'⟩'}) ==> bool (!b);

[[ IS-ZERO ]]: ({'is0'}, {'⟨'{'#' n}'⟩'}) ==> bool (n == 0);
end