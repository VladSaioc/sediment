domain Loc = Int;

domain EnvV = Symbol -> Loc;

let new = \l : Loc . l + 1;

domain EnvP = Symbol -> Stm;

domain Sto = Loc -> Int;

syntax Aexp = Aexp '+' Aexp
  | Aexp '*' Aexp
  | Aexp '-' Aexp
  | '(' Aexp ')'
  | '#' Int
  | Symbol;

syntax Bexp = Aexp '==' Aexp
  | Aexp '<' Aexp
  | '!' Bexp
  | Bexp '&' Bexp
  | 'b(' Bexp ')'
  | '?' Bool;

syntax Stm = Symbol '=' Aexp
  | 'skip'
  | Stm ';' Stm
  | 'if' Bexp 'then' Stm 'else' Stm
  | 'while' Bexp 'do' Stm
  | DecV DecP Stm
  | Symbol '()';

syntax DecV = 'var' Symbol '=' Aexp ';' DecV
  | '系v';

syntax DecP = 'proc' Symbol '=' Stm ';' DecP
  | '系p';

system Aexp : EnvV * Sto |- Aexp ==> Int =
  [[ NUM ]]: envV, sto |- {'#' n} ==> n;

  [[ VAR ]]: envV, sto |- {x} ==> sto(l) \\
    let l = envV(x);

  [[ ADD ]]: envV, sto |- {a1 '+' a2} ==> v1 + v2 \\
    envV, sto |- a1 ==> v1,
    envV, sto |- a2 ==> v2;
  
  [[ SUB ]]: envV, sto |- {a1 '-' a2} ==> v1 - v2 \\
    envV, sto |- a1 ==> v1,
    envV, sto |- a2 ==> v2;
  
  [[ MUL ]]: envV, sto |- {a1 '*' a2} ==> v1 * v2 \\
    envV, sto |- a1 ==> v1,
    envV, sto |- a2 ==> v2;
  
  [[ PARENS ]]: envV, sto |- {'(' a ')'} ==> v \\
    envV, sto |- a ==> v;
end

system Bexp : EnvV * Sto |- Bexp ==> Bool =
  [[ CONST ]]: envV, sto |- {'?' b} ==> b;

  [[ EQ ]]: envV, sto |- {a1 '==' a2} ==> v1 == v2 \\
    envV, sto |- a1 =Aexp=> v1,
    envV, sto |- a2 =Aexp=> v2;

  [[ LT ]]: envV, sto |- {a1 '<' a2} ==> v1 < v2 \\
    envV, sto |- a1 =Aexp=> v1,
    envV, sto |- a2 =Aexp=> v2;
  
  [[ NOT ]]: envV, sto |- {'!' b} ==> !v \\
    envV, sto |- b ==> v;
  
  [[ PARENS ]]: envV, sto |- {'b(' b ')'} ==> v \\
    envV, sto |- b ==> v;
  
  [[ AND ]]: envV, sto |- {b1 '&' b2} ==> v1 & v2 \\
    envV, sto |- b1 ==> v1,
    envV, sto |- b2 ==> v2;
end

system DecV : DecV * EnvV * Sto ==> EnvV * Sto =
  [[ VAR-DECL ]]: ({'var' x '=' a ';' Dv}, envV, sto) ==> (envV', sto') \\
    envV, sto |- a =Aexp=> v,
    let l = envV(`next`),
    let envV'' = envV[x -> l][`next` -> new(l)],
    (Dv, envV'', sto[l -> v]) ==> (envV', sto');

  [[ EMPTY ]]: ({'系v'}, envV, sto) ==> (envV, sto);
end

system Stm : EnvV * EnvP |- Stm * Sto ==> Sto =
  [[ ASS ]]: envV, envP |- ({x '=' a}, sto) ==> sto[l -> v] \\
    envV, sto |- a =Aexp=> v,
    let l = envV(x);
  
  [[ SKIP ]]: envV, envP |- (skip{}, sto) ==> sto;

  [[ COMP ]]: envV, envP |- ({S1 ';' S2}, sto) ==> sto' \\
    envV, envP |- (S1, sto) ==> sto'',
    envV, envP |- (S2, sto'') ==> sto';

  [[ IF-TRUE ]]: envV, envP |- ({'if' b 'then' S1 'else' S2}, sto) ==> sto' \\
    envV, sto |- b =Bexp=> true,
    envV, envP |- (S1, sto) ==> sto';

  [[ IF-FALSE ]]: envV, envP |- ({'if' b 'then' S1 'else' S2}, sto) ==> sto' \\
    envV, sto |- b =Bexp=> false,
    envV, envP |- (S2, sto) ==> sto';
  
  [[ WHILE ]]: envV, envP |- ({'while' b 'do' S}, sto) ==> sto' \\
    envV, sto |- b =Bexp=> true,
    envV, envP |- (S, sto) ==> sto'',
    envV, envP |- ({'while' b 'do' S}, sto'') ==> sto';
  
  [[ WHILE ]]: envV, envP |- ({'while' b 'do' S}, sto) ==> sto \\
    envV, sto |- b =Bexp=> false;
  
  [[ BLOCK ]]: envV, envP |- ({dv dp S}, sto) ==> sto' \\
    (dv, envV, sto) =DecV=> (envV', sto''),
    envV' |- (dp, envP) =DecP=> envP',
    envV', envP' |- (S, sto'') ==> sto';
  
  [[ CALL ]]: envV, envP |- ({p '()'}, sto) ==> sto' \\
    let S = envP(p),
    envV, envP |- (S, sto) ==> sto';
end

system DecP : EnvV |- DecP * EnvP ==> EnvP =
  [[ PROC-DECL ]]: envV |- ({'proc' p '=' S ';' Dp}, envP) ==> envP' \\
    envV |- (Dp, envP[p -> S]) ==> envP';

  [[ EMPTY ]]: envV |- ({'系p'}, envP) ==> envP;
end