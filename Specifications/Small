domain Env = Symbol -> Int;

syntax Stm = 'var' Symbol '=' Exp
  | Exp
  | Stm ';' Stm
;

syntax Exp = '#' Int
  | '@' Symbol
  | Exp '+' Exp
  | Exp '-' Exp
  | Exp '*' Exp
  | Exp '/' Exp
;

system e : Env |- Exp ==> Int =
  [[ VAR ]]: s |- {'@' x} ==> s(x);
  
  [[ CONST ]]: s |- {'#' n} ==> n;
  
  [[ ADD ]]: s |- {e1 '+' e2} ==> v1 + v2 \\
    s |- e1 ==> v1,
    s |- e2 ==> v2;
  
  [[ SUB ]]: s |- {e1 '-' e2} ==> v1 - v2 \\
    s |- e1 ==> v1,
    s |- e2 ==> v2;
  
  [[ MUL ]]: s |- {e1 '*' e2} ==> v1 * v2 \\
    s |- e1 ==> v1,
    s |- e2 ==> v2;
  
  [[ DIV ]]: s |- {e1 '/' e2} ==> v1 / v2 \\
    s |- e1 ==> v1,
    s |- e2 ==> v2,
    if v2 != 0;
end

system S : Stm * Env ==> Env =
  [[ DECL ]]: ({'var' x '=' e}, s) ==> s[x -> v] \\
    s |- e =e=> v;
  
  [[ EXP ]]: ({e}, s) ==> s \\
    s |- e =e=> v;
  
  [[ COMP ]]: ({S1 ';' S2}, s) ==> s'' \\
    (S1, s) ==> s',
    (S2, s') ==> s'';
end

let empty = \x : Symbol . -|Int|;

evaluate empty |- {{'#' 4} '+' {'#' 5}} in e;

evaluate ({
  {'var' `x` '=' {'#' 5}} ';'
  {{'@' `x`}}
}, empty) in S;